version: "3.8"

services:
  ### ============================================
  ### Workspace
  ### ============================================
  workspace:
    container_name: workspace
    build:
      context: ./workspace
      dockerfile: Dockerfile
      args:
        - AT_CHINA=${AT_CHINA}
    stdin_open: true  # docker run -i
    tty: true  #docker run -t
    volumes:
      # 默认模式，主机和容器文件完全一致
      - ${CODE_PATH}:/workspace
      # 容器端需要进行存储的文件
      # - ${DATA_PATH}/workspace:/workspace/storage
      # Host files first. 在主机端编写代码时使用此目录
      # - ${CODE_PATH}/external:/workspace/external:cached
      # Container files first. 在容器端编写代码时使用此目录
      # - ${CODE_PATH}/internal:/workspace/internal:delegated
    ports:
      - "${WORKSPACE_SSH_PORT}:22"
    environment:
      - TZ=${TZ}

  ### ============================================
  ### Web Servers
  ### ============================================
  nginx:
    container_name: nginx
    build:
      context: ./nginx
    restart: always
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ${SITES_PATH}:/usr/share/nginx/html
      - ${DATA_PATH}/nginx/logs:/var/log/nginx

  caddy:
    container_name: caddy
    build:
      context: ./caddy
    restart: always
    ports:
      - "${CADDY_HTTP_PORT}:80"
      - "${CADDY_HTTPS_PORT}:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ${SITES_PATH}:/srv
      - ${DATA_PATH}/caddy/config:/config
      - ${DATA_PATH}/caddy/data:/data
      - ${DATA_PATH}/caddy/logs:/var/log/caddy

  ### ============================================
  ### Databases
  ### ============================================
  mysql:
    container_name: mysql
    build:
      context: ./mysql
    restart: always
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - ${DATA_PATH}/mysql:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${TZ}

  redis:
    container_name: redis
    build:
      context: ./redis
    restart: always
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ${DATA_PATH}/redis:/data

  postgres:
    container_name: postgres
    build:
      context: ./postgres
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ${DATA_PATH}/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  mongo:
    container_name: mongo
    build:
      context: ./mongo
    restart: always
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - ${DATA_PATH}/mongo/data:/data/db
      - ${DATA_PATH}/mongo/config:/data/configdb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}

  ### ============================================
  ### Database Managers
  ### ============================================
  phpmyadmin:
    container_name: phpmyadmin
    build:
      context: ./phpmyadmin
    restart: always
    ports:
      - "${PMA_PORT}:80"
    environment:
      - PMA_ARBITRARY=${PMA_ARBITRARY}

  adminer:
    container_name: adminer
    build:
      context: ./adminer
    restart: always
    ports:
      - "${ADMINER_PORT}:8080"
    environment:
      - ADMINER_DESIGN=${ADMINER_DESIGN}

  phpredisadmin:
    container_name: phpredisadmin
    build:
      context: ./phpredisadmin
    restart: always
    depends_on:
      - redis
    ports:
      - "${PRA_PORT}:80"
    volumes:
      - ./phpredisadmin/config.inc.php:/src/app/includes/config.inc.php

  mongo-express:
    container_name: mongo-express
    build:
      context: ./mongo-express
    restart: always
    depends_on:
      - mongo
    ports:
      - "${ME_PORT}:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=${ME_CONFIG_MONGODB_SERVER}
      - ME_CONFIG_OPTIONS_EDITORTHEME=${ME_CONFIG_OPTIONS_EDITORTHEME}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${ME_CONFIG_MONGODB_ADMINUSERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${ME_CONFIG_MONGODB_ADMINPASSWORD}

  pgadmin:
    container_name: pgadmin
    build:
      context: ./pgadmin
    depends_on:
      - postgres
    ports:
      - "${PGA_PORT}:80"
    volumes:
      - ${DATA_PATH}/pgadmin:/var/lib/pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}

  ### ============================================
  ### Applications
  ### ============================================
  wordpress:
    container_name: wordpress
    build:
      context: ./wordpress
    restart: always
    depends_on:
      - mysql
    ports:
      - "${WORDPRESS_PORT}:80"
    volumes:
      - ${DATA_PATH}/wordpress:/var/www/html
    environment:
      - WORDPRESS_DB_HOST=${WORDPRESS_DB_HOST}
      - WORDPRESS_DB_USER=${WORDPRESS_DB_USER}
      - WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASSWORD}
      - WORDPRESS_DB_NAME=${WORDPRESS_DB_NAME}

  ghost:
    container_name: ghost
    build:
      context: ./ghost
    restart: always
    depends_on:
      - mysql
    ports:
      - "${GHOST_PORT}:2368"
    volumes:
      - ${DATA_PATH}/ghost:/var/lib/ghost/content
    environment:
      - url=http://localhost:${GHOST_PORT}
      - database__client=${GHOST_DATABASE_CLIENT}
      - database__connection__host=${GHOST_DATABASE_CONNECTION_HOST}
      - database__connection__user=${GHOST_DATABASE_CONNECTION_USER}
      - database__connection__password=${GHOST_DATABASE_CONNECTION_PASSWORD}
      - database__connection__database=${GHOST_DATABASE_CONNECTION_DATABASE}

  jenkins:
    container_name: jenkins
    build:
      context: ./jenkins
    restart: always
    ports:
      - "${JENKINS_PORT_8080}:8080"
      - "${JENKINS_PORT_50000}:50000"
    volumes:
      - ${DATA_PATH}/jenkins:/var/jenkins_home

  monica:
    container_name: monica
    build:
      context: ./monica
    restart: always
    depends_on:
      - mysql
    ports:
      - "${MONICA_PORT}:80"
    environment:
      - DB_HOST=${MONICA_DB_HOST}
      - DB_USERNAME=${MONICA_DB_USERNAME}
      - DB_PASSWORD=${MONICA_DB_PASSWORD}
    volumes:
      - ${DATA_PATH}/monica:/var/www/html/storage

  gitlab:
    container_name: gitlab
    build:
      context: ./gitlab
    restart: always
    ports:
      - '${GITLAB_PORT_HTTP}:80'
      - '${GITLAB_PORT_HTTPS}:443'
      - '${GITLAB_PORT_SSH}:22'
    volumes:
      - ${DATA_PATH}/gitlab/config:/etc/gitlab
      - ${DATA_PATH}/gitlab/logs:/var/log/gitlab
      - ${DATA_PATH}/gitlab/data:/var/opt/gitlab

  portainer:
    container_name: portainer
    build:
      context: ./portainer
    restart: always
    ports:
      - "${PORTAINER_PORT_HTTP}:8000"
      - "${PORTAINER_PORT_HTTPS}:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_PATH}/portainer:/data

  nextcloud:
    container_name: nextcloud
    build:
      context: ./nextcloud
    restart: always
    depends_on:
      - mysql
    links:
      - mysql
    ports:
      - "${NEXTCLOUD_PORT}:80"
    volumes:
      - ${DATA_PATH}/nextcloud:/var/www/html
    environment:
      - MYSQL_HOST=${NEXTCLOUD_MYSQL_HOST}
      - MYSQL_DATABASE=${NEXTCLOUD_MYSQL_DATABASE}
      - MYSQL_USER=${NEXTCLOUD_MYSQL_USER}
      - MYSQL_PASSWORD=${NEXTCLOUD_MYSQL_PASSWORD}

  elasticsearch:
    container_name: elasticsearch
    build:
      context: ./elasticsearch
    restart: always
    ports:
      - "${ELASTICSEARCH_PORT_HTTP}:9200"
      - "${ELASTICSEARCH_PORT_TCP}:9300"
    volumes:
      - ${DATA_PATH}/elasticsearch:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node

  kibana:
    container_name: kibana
    build:
      context: ./kibana
    restart: always
    depends_on:
      - elasticsearch
    links:
      - elasticsearch
    ports:
      - "${KIBANA_PORT}:5601"
    volumes:
      # - ${DATA_PATH}/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
      - ${DATA_PATH}/kibana/data:/usr/share/kibana/data
    environment:
      - ELASTICSEARCH_HOSTS=${KIBANA_ELASTICSEARCH_HOSTS}

  redmine:
    container_name: redmine
    build:
      context: ./redmine
    restart: always
    depends_on:
      - mysql
    ports:
      - "${REDMINE_PORT}:3000"
    volumes:
      - ${DATA_PATH}/redmine:/usr/src/redmine/files
    environment:
      - REDMINE_DB_MYSQL=${REDMINE_DB_MYSQL}
      - REDMINE_DB_PORT=${REDMINE_DB_PORT}
      - REDMINE_DB_DATABASE=${REDMINE_DB_DATABASE}
      - REDMINE_DB_USERNAME=${REDMINE_DB_USERNAME}
      - REDMINE_DB_PASSWORD=${REDMINE_DB_PASSWORD}

  sonarqube:
    container_name: sonarqube
    build:
      context: ./sonarqube
    restart: always
    depends_on:
      - postgres
    ports:
      - "${SONARQUBE_PORT}:9000"
    environment:
      - SONAR_JDBC_URL=${SONARQUBE_JDBC_URL}
      - SONAR_JDBC_USERNAME=${SONARQUBE_JDBC_USERNAME}
      - SONAR_JDBC_PASSWORD=${SONARQUBE_JDBC_PASSWORD}
    volumes:
      - ${DATA_PATH}/sonarqube/data:/opt/sonarqube/data
      - ${DATA_PATH}/sonarqube/extensions:/opt/sonarqube/extensions
      - ${DATA_PATH}/sonarqube/logs:/opt/sonarqube/logs
